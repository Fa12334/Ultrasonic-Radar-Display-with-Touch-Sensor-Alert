#include <Ucglib.h>
#include <Servo.h>

const int trigPin = 6;
const int echoPin = 5;
int Ymax = 128;
int Xmax = 160;
int base = 8;
int pos = base + 6;
int deg = 0;
int x;
int val = 200;
int j = 2;
Servo myServo;

long duration;
int distance;
int k;

Ucglib_ST7735_18x128x160_HWSPI ucg(/*cd=*/9, /*cs=*/10, /*reset=*/8);
const int ledRightPin = 3;  // Pin for the right LED
const int ledLeftPin = 2;   // Pin for the left LED
const int touchRightPin = 4; // Pin for the right touch sensor
const int touchLeftPin = 5;  // Pin for the left touch sensor
const int buzzerRightPin = 12; // Pin for the right buzzer
const int buzzerLeftPin = 14;  // Pin for the left buzzer

void setup(void) {
  delay(1000);

  // Initialize Servo
  myServo.attach(7);  // Use the actual pin number where your servo is connected
  myServo.write(80);

  ucg.begin(UCG_FONT_MODE_SOLID);
  ucg.setFont(ucg_font_6x10_tr);
  ucg.clearScreen();
  ucg.setRotate270();

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  pinMode(ledRightPin, OUTPUT);    // Initialize the right LED pin
  pinMode(ledLeftPin, OUTPUT);     // Initialize the left LED pin
  pinMode(touchRightPin, INPUT);   // Initialize the right touch sensor pin
  pinMode(touchLeftPin, INPUT);    // Initialize the left touch sensor pin
  pinMode(buzzerRightPin, OUTPUT); // Initialize the right buzzer pin
  pinMode(buzzerLeftPin, OUTPUT);  // Initialize the left buzzer pin

  Serial.begin(9600);
}

void loop(void) {
  // Read touch sensor inputs
  int touchRightState = digitalRead(touchRightPin);
  int touchLeftState = digitalRead(touchLeftPin);

  // Check if any of the touch sensors outputs low
  if (touchRightState == LOW || touchLeftState == LOW) {
    // Turn on buzzers
    digitalWrite(buzzerRightPin, HIGH);
    digitalWrite(buzzerLeftPin, HIGH);
  } else {
    // Turn off buzzers
    digitalWrite(buzzerRightPin, LOW);
    digitalWrite(buzzerLeftPin, LOW);
  }

  fix();

  for (x = 80; x >= 10; x--) {
    distance = calculateDistance();
    Serial.println(distance);

    k = map(x, 80, 10, 15, 165);
    myServo.write(k);

    if (distance < 30) {
      int f = x + 6;
      ucg.setColor(255, 0, 0);
      ucg.drawLine(Xmax / 2, pos, -val * cos(radians(f * 2)), val * sin(radians(f * 2)));
    }

    ucg.setColor(0, 207, 0);
    ucg.drawLine(Xmax / 2, pos, -200 * cos(radians(x * 2)), 200 * sin(radians(x * 2)));

    int d = x + 1;
    ucg.setColor(0, 207, 0);
    int c = x + 2;
    ucg.setColor(0, 207, 0);
    int b = x + 3;
    ucg.setColor(0, 102, 0);
    int a = x + 4;
    ucg.setColor(0, 102, 0);
    int e = x + 5;
    ucg.setColor(0, 0, 0);
    ucg.drawLine(Xmax / 2, pos, -200 * cos(radians(e * 2)), 200 * sin(radians(e * 2)));
    ucg.setColor(255, 0, 0);
    ucg.setPrintPos(160, 0);
    ucg.setPrintDir(2);
    ucg.print("Deg :");
    deg = map(x, 80, 10, 0, 180);
    ucg.setPrintPos(120, 0);
    ucg.setPrintDir(2);
    ucg.print(deg);
    ucg.setPrintPos(10, 0);
    ucg.print(distance);
    ucg.setColor(0, 0, 255);
    ucg.setPrintPos(90, 38);
    ucg.setPrintDir(2);
    ucg.print("0.25");
    ucg.setPrintPos(90, 70);
    ucg.print("0.50");
    ucg.setPrintPos(90, 110);
    ucg.print("1.00");

    // Control the LEDs based on the object's direction and touch sensor input
    if (distance < 10 && touchRightState == LOW) {
      digitalWrite(ledRightPin, HIGH); // Turn on the right LED
      digitalWrite(ledLeftPin, LOW);   // Turn off the left LED
    } else {
      digitalWrite(ledRightPin, LOW);  // Turn off the right LED
      digitalWrite(ledLeftPin, LOW);   // Turn off the left LED
    }
  }

  fix();

  for (x = 10; x <= 80; x++) {
    distance = calculateDistance();
    Serial.println(distance);

    k = map(x, 10, 80, 165, 15);
    myServo.write(k);

    if (distance < 100 && touchLeftState == LOW) {
      int e = x - 5;
      ucg.setColor(255, 0, 0);
      ucg.drawLine(Xmax / 2, pos, -val * cos(radians(e * 2)), val * sin(radians(e * 2)));
    }

    ucg.setColor(0, 207, 0);
    ucg.drawLine(Xmax / 2, pos, -200 * cos(radians(x * 2)), 200 * sin(radians(x * 2)));

    int a = x - 1;
    int b = x - 2;
    ucg.setColor(0, 102, 0);
    int c = x - 3;
    ucg.setColor(0, 102, 0);
    int d = x - 4;
    ucg.setColor(0, 0, 0);
    ucg.drawLine(Xmax / 2, pos, -200 * cos(radians(d * 2)), 200 * sin(radians(d * 2)));
    ucg.setColor(255, 0, 0);
    ucg.setPrintPos(160, 0);
    ucg.setPrintDir(2);
    ucg.print("Deg :");
    deg = map(x, 10, 80, 0, 180);
    ucg.setPrintPos(120, 0);
    ucg.setPrintDir(2);
    ucg.print(deg);
    ucg.setPrintPos(10, 0);
    ucg.print(distance);
    ucg.setColor(0, 0, 255);
    ucg.setPrintPos(90, 38);
    ucg.setPrintDir(2);
    ucg.print("0.25");
    ucg.setPrintPos(90, 70);
    ucg.print("0.50");
    ucg.setPrintPos(90, 110);
    ucg.print("1.00");

    // Control the LEDs based on the object's direction and touch sensor input
    if (distance < 10 && touchLeftState == LOW) {
      digitalWrite(ledRightPin, LOW);  // Turn off the right LED
      digitalWrite(ledLeftPin, HIGH);  // Turn on the left LED
    } else {
      digitalWrite(ledRightPin, LOW);  // Turn off the right LED
      digitalWrite(ledLeftPin, LOW);   // Turn off the left LED
    }
  }
}

void fix() {
  ucg.setColor(255, 0, 0);
  ucg.drawDisc(Xmax / 2, base, 5, UCG_DRAW_LOWER_RIGHT);
  ucg.drawDisc(Xmax / 2, base, 5, UCG_DRAW_LOWER_LEFT);

  ucg.setColor(225, 255, 50);
  ucg.drawCircle(80, base, 115, UCG_DRAW_LOWER_RIGHT);
  ucg.drawCircle(80, base, 115, UCG_DRAW_LOWER_LEFT);

  ucg.drawCircle(80, base, 78, UCG_DRAW_LOWER_RIGHT);
  ucg.drawCircle(80, base, 78, UCG_DRAW_LOWER_LEFT);

  ucg.drawCircle(80, base, 40, UCG_DRAW_LOWER_RIGHT);
  ucg.drawCircle(80, base, 40, UCG_DRAW_LOWER_LEFT);

  ucg.drawLine(0, base, 160, base);

  ucg.setColor(0, 0, 0);
  ucg.drawBox(100, 0, 30, 8);
}

int calculateDistance() {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;
  return distance;
}